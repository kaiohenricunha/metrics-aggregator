name: Docker publish

on:
  # ⬇️  Run after upstream workflows succeed
  workflow_run:
    workflows: ["Test & Coverage", "Lint"]   # <── added Lint here
    types: [completed]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    # gate on success of the triggering workflow
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    # ⬇️  guardrail: only one publish for a given commit
    concurrency:
      group: ci-publish-${{ github.event.workflow_run.head_sha }}
      cancel-in-progress: true

    needs: []                # (not used with workflow_run)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      digest: ${{ steps.build-and-push.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Go version
        id: goversion
        run: |
          echo "version=$(grep '^go ' go.mod | cut -d' ' -f2)" >> "$GITHUB_OUTPUT"

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GO_VERSION=${{ steps.goversion.outputs.version }}

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  scan-image:
    needs: build
    runs-on: ubuntu-latest
    permissions:                 # read permission is enough for Trivy
      contents: read
      packages: read

    steps:
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@v0.32.0   # latest 2025-06 release
        with:
          image-ref: ghcr.io/${{ github.repository }}@${{ needs.build.outputs.digest }}
          exit-code: 1           # fail on HIGH / CRITICAL vulns
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
       